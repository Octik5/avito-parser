import requests
from bs4 import BeautifulSoup
import time
import random
from fake_useragent import UserAgent
import json
import os

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = '-'
TELEGRAM_CHAT_ID = '-'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserAgent
ua = UserAgent()

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
sent_links = set()
if os.path.exists('sent_links.json'):
    with open('sent_links.json', 'r') as f:
        sent_links = set(json.load(f))


def save_links():
    with open('sent_links.json', 'w') as f:
        json.dump(list(sent_links), f)


def get_headers():
    return {
        'User-Agent': ua.random,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Referer': 'https://www.avito.ru/',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
    }


def send_to_telegram(title, link):
    message = f"üî• –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ Avito:\n\n{title}\n\n{link}"
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    try:
        response = requests.post(url, json={
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'disable_web_page_preview': False
        })
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram" if response.status_code == 200 else f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram: {e}")


def parse_avito(url):
    try:
        response = requests.get(url, headers=get_headers(), timeout=15)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
            return None

        soup = BeautifulSoup(response.text, 'html.parser')

        # –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Avito 2024
        items = []
        for item in soup.select('[data-marker="item"], .iva-item-root'):
            try:
                link = item.find('a', href=True)
                if not link: continue

                full_url = f"https://www.avito.ru{link['href'].split('?')[0]}"
                title = item.find('h3', {'itemprop': 'name'}) or item.find('h3')
                title = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

                items.append({
                    'title': title,
                    'url': full_url
                })
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")

        return items

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def main():
    url = "https://www.avito.ru/kazan/tovary_dlya_kompyutera/komplektuyuschie/korpus%D0%B0-ASgBAgICAkTGB~pm7gnEZw?cd=1&q=%D0%BA%D0%BE%D1%80%D0%BF%D1%83%D1%81+%D0%B4%D0%BB%D1%8F+%D0%BF%D0%BA+%D0%BA%D0%BE%D0%BC%D0%BF%D1%8C%D1%8E%D1%82%D0%B5%D1%80%D0%B0&s=104"
    last_ad_url = None  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å URL –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

    while True:
        print("\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Avito...")
        items = parse_avito(url)

        if items:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            first_item = items[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
            if first_item['url'] != last_ad_url:
                print(f"\nüîπ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{first_item['title']}\n{first_item['url']}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –µ–≥–æ —Ä–∞–Ω—å—à–µ
                if first_item['url'] not in sent_links:
                    send_to_telegram(first_item['title'], first_item['url'])
                    sent_links.add(first_item['url'])
                    save_links()
                    last_ad_url = first_item['url']  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                else:
                    print("‚è© –≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
            else:
                print("‚è© –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


        delay = 300
        print(f"\n‚è≥ –û–∂–∏–¥–∞–µ–º {delay // 60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        time.sleep(delay)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        save_links()
        print("\nüõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")